{"ast":null,"code":"var _jsxFileName = \"/Users/kanghyew0n/Desktop/prac/React-Query-Prac/udemy/base-blog-em/src/PostDetail.jsx\",\n    _s = $RefreshSig$();\n\nimport { QueryClient, useQuery } from 'react-query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst queryClient = new QueryClient();\n\nasync function fetchComments(postId) {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/comments?postId=${postId}`);\n  return response.json();\n}\n\nasync function deletePost(postId) {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/postId/${postId}`, {\n    method: \"DELETE\"\n  });\n  return response.json();\n}\n\nasync function updatePost(postId) {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/postId/${postId}`, {\n    method: \"PATCH\",\n    data: {\n      title: \"REACT QUERY FOREVER!!!!\"\n    }\n  });\n  return response.json();\n}\n\nexport function PostDetail({\n  post\n}) {\n  _s();\n\n  const {\n    data,\n    isError,\n    isLoading\n  } = useQuery(\"comments\", () => fetchComments(post.id));\n  console.log(post.id);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 24\n  }, this);\n  if (isError) return /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"Oops, sorry\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 22\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        color: \"blue\"\n      },\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Update title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), data.map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [comment.email, \": \", comment.body]\n    }, comment.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n}\n\n_s(PostDetail, \"aGSI5pdScSoxkmDNHk//3GMPUMI=\", false, function () {\n  return [useQuery];\n});\n\n_c = PostDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostDetail\");","map":{"version":3,"sources":["/Users/kanghyew0n/Desktop/prac/React-Query-Prac/udemy/base-blog-em/src/PostDetail.jsx"],"names":["QueryClient","useQuery","queryClient","fetchComments","postId","response","fetch","json","deletePost","method","updatePost","data","title","PostDetail","post","isError","isLoading","id","console","log","color","body","map","comment","email"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,aAAtC;;;AAEA,MAAMC,WAAW,GAAG,IAAIF,WAAJ,EAApB;;AAEA,eAAeG,aAAf,CAA6BC,MAA7B,EAAqC;AACnC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,wDAAuDF,MAAO,EADrC,CAA5B;AAGA,SAAOC,QAAQ,CAACE,IAAT,EAAP;AACD;;AAED,eAAeC,UAAf,CAA0BJ,MAA1B,EAAkC;AAChC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,+CAA8CF,MAAO,EAD5B,EAE1B;AAAEK,IAAAA,MAAM,EAAE;AAAV,GAF0B,CAA5B;AAIA,SAAOJ,QAAQ,CAACE,IAAT,EAAP;AACD;;AAED,eAAeG,UAAf,CAA0BN,MAA1B,EAAkC;AAChC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,+CAA8CF,MAAO,EAD5B,EAE1B;AAAEK,IAAAA,MAAM,EAAE,OAAV;AAAmBE,IAAAA,IAAI,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT;AAAzB,GAF0B,CAA5B;AAIA,SAAOP,QAAQ,CAACE,IAAT,EAAP;AACD;;AAED,OAAO,SAASM,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA8B;AAAA;;AACnC,QAAM;AAACH,IAAAA,IAAD;AAAOI,IAAAA,OAAP;AAAgBC,IAAAA;AAAhB,MAA6Bf,QAAQ,CAAC,UAAD,EAAa,MAAME,aAAa,CAACW,IAAI,CAACG,EAAN,CAAhC,CAA3C;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACG,EAAjB;AACA,MAAGD,SAAH,EAAc,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACd,MAAGD,OAAH,EAAY,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEZ,sBACE;AAAA,4BACE;AAAI,MAAA,KAAK,EAAE;AAAEK,QAAAA,KAAK,EAAE;AAAT,OAAX;AAAA,gBAA+BN,IAAI,CAACF;AAApC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,oBAE0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAF1B,eAGE;AAAA,gBAAIE,IAAI,CAACO;AAAT;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,EAKGV,IAAI,CAACW,GAAL,CAAUC,OAAD,iBACR;AAAA,iBACGA,OAAO,CAACC,KADX,QACoBD,OAAO,CAACF,IAD5B;AAAA,OAASE,OAAO,CAACN,EAAjB;AAAA;AAAA;AAAA;AAAA,YADD,CALH;AAAA,kBADF;AAaD;;GAnBeJ,U;UACqBZ,Q;;;KADrBY,U","sourcesContent":["import { QueryClient, useQuery } from 'react-query'\n\nconst queryClient = new QueryClient()\n\nasync function fetchComments(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/comments?postId=${postId}`\n  );\n  return response.json();\n}\n\nasync function deletePost(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/postId/${postId}`,\n    { method: \"DELETE\" }\n  );\n  return response.json();\n}\n\nasync function updatePost(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/postId/${postId}`,\n    { method: \"PATCH\", data: { title: \"REACT QUERY FOREVER!!!!\" } }\n  );\n  return response.json();\n}\n\nexport function PostDetail({ post }) {\n  const {data, isError, isLoading} = useQuery(\"comments\", () => fetchComments(post.id))\n  console.log(post.id)\n  if(isLoading) return <h3>Loading</h3>\n  if(isError) return <h3>Oops, sorry</h3> \n\n  return (\n    <>\n      <h3 style={{ color: \"blue\" }}>{post.title}</h3>\n      <button>Delete</button> <button>Update title</button>\n      <p>{post.body}</p>\n      <h4>Comments</h4>\n      {data.map((comment) => (\n        <li key={comment.id}>\n          {comment.email}: {comment.body}\n        </li>\n      ))}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}