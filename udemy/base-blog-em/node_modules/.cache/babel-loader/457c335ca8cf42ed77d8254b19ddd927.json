{"ast":null,"code":"var _jsxFileName = \"/Users/kanghyew0n/Desktop/prac/React-Query-Prac/udemy/base-blog-em/src/Posts.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\nimport { PostDetail } from \"./PostDetail\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst maxPostPage = 10;\n\nasync function fetchPosts(pageNum) {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/posts?_limit=10&_page=${pageNum}`);\n  return response.json();\n}\n\nexport function Posts() {\n  _s();\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedPost, setSelectedPost] = useState(null);\n  const queryClient = useQueryClient();\n  useEffect(() => {\n    if (currentPage < maxPostPage) {\n      const nextPage = currentPage + 1;\n      queryClient.prefetchQuery([\"posts\", nextPage], () => fetchPosts(nextPage));\n    }\n  }, [currentPage, queryClient]); // useQuery(\"쿼리 키\", 비동기 함수);\n\n  const {\n    data,\n    isLoading,\n    isError,\n    error\n  } = useQuery([\"posts\", currentPage], () => fetchPosts(currentPage), {\n    staleTime: 2000,\n    keepPreviousData: true\n  }); // if (isLoading) return <h3>Loading...</h3>;\n  // isLoading 은 fetchPosts 함수가 실행중이면서 캐싱된 데이터가 없을때 참이된다.\n  // isFetching 은 캐싱된 데이터와 상관없이 fetchPosts 함수가 실행하면 참이된다.\n\n  if (isError) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Oops, \\uC6C1\\uC2A4 something went wrong\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error.toString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 48\n    }, this)]\n  }, void 0, true);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"post-title\",\n        onClick: () => setSelectedPost(post),\n        children: post.title\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pages\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: currentPage <= 1,\n        onClick: () => {\n          setCurrentPage(prev => prev - 1);\n        },\n        children: \"Previous page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page \", currentPage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: currentPage >= maxPostPage,\n        onClick: () => {\n          setCurrentPage(prev => prev + 1);\n        },\n        children: \"Next page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), selectedPost && /*#__PURE__*/_jsxDEV(PostDetail, {\n      post: selectedPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Posts, \"c+XmTRfgdw9/2b90GL2vbaIbu6A=\", false, function () {\n  return [useQueryClient, useQuery];\n});\n\n_c = Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/Users/kanghyew0n/Desktop/prac/React-Query-Prac/udemy/base-blog-em/src/Posts.jsx"],"names":["useEffect","useState","useQuery","useQueryClient","PostDetail","maxPostPage","fetchPosts","pageNum","response","fetch","json","Posts","currentPage","setCurrentPage","selectedPost","setSelectedPost","queryClient","nextPage","prefetchQuery","data","isLoading","isError","error","staleTime","keepPreviousData","toString","map","post","title","id","prev"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\n\nimport { PostDetail } from \"./PostDetail\";\nconst maxPostPage = 10;\n\nasync function fetchPosts(pageNum) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/posts?_limit=10&_page=${pageNum}`\n  );\n  return response.json();\n}\n\nexport function Posts() {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedPost, setSelectedPost] = useState(null);\n\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (currentPage < maxPostPage) {\n      const nextPage = currentPage + 1;\n      queryClient.prefetchQuery([\"posts\", nextPage], () =>\n        fetchPosts(nextPage)\n      );\n    }\n  }, [currentPage, queryClient]);\n\n  // useQuery(\"쿼리 키\", 비동기 함수);\n  \n  const { data, isLoading, isError, error } = useQuery(\n    [\"posts\", currentPage],\n    () => fetchPosts(currentPage),\n    {\n      staleTime: 2000,\n      keepPreviousData: true\n    }\n  );\n  // if (isLoading) return <h3>Loading...</h3>;\n  // isLoading 은 fetchPosts 함수가 실행중이면서 캐싱된 데이터가 없을때 참이된다.\n  // isFetching 은 캐싱된 데이터와 상관없이 fetchPosts 함수가 실행하면 참이된다.\n  if (isError)\n    return (\n      <>\n        <h3>Oops, 웁스 something went wrong</h3> <p>{error.toString()}</p>\n      </>\n    );\n\n  return (\n    <>\n      <ul>\n        {data.map((post) => (\n          <li\n            key={post.id}\n            className=\"post-title\"\n            onClick={() => setSelectedPost(post)}\n          >\n            {post.title}\n          </li>\n        ))}\n      </ul>\n      <div className=\"pages\">\n        <button\n          disabled={currentPage <= 1}\n          onClick={() => {\n            setCurrentPage((prev) => prev - 1);\n          }}\n        >\n          Previous page\n        </button>\n        <span>Page {currentPage}</span>\n        <button\n          disabled={currentPage >= maxPostPage}\n          onClick={() => {\n            setCurrentPage((prev) => prev + 1);\n          }}\n        >\n          Next page\n        </button>\n      </div>\n      <hr />\n      {selectedPost && <PostDetail post={selectedPost} />}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}