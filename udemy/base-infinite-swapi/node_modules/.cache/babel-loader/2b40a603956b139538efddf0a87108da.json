{"ast":null,"code":"var _jsxFileName = \"/Users/kanghyew0n/Desktop/prac/React-Query-Prac/udemy/base-infinite-swapi/src/species/InfiniteSpecies.jsx\",\n    _s = $RefreshSig$();\n\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { Species } from \"./Species\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialUrl = \"https://swapi.dev/api/species/\";\n\nconst fetchUrl = async url => {\n  const response = await fetch(url);\n  return response.json();\n};\n\nexport function InfiniteSpecies() {\n  _s();\n\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isLoading,\n    isError,\n    error,\n    isFetching\n  } = useInfiniteQuery(\"sw-species\", ({\n    pageParam = initialUrl\n  }) => fetchUrl(pageParam), {\n    getNextPageParam: lastPage => lastPage.next || undefined\n  });\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 25\n  }, this);\n  if (isError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error! \", error.toString()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isFetching && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      loadMore: fetchNextPage,\n      hasMore: hasNextPage,\n      children: data.pages.map(pageData => {\n        return pageData.results.map(data => {\n          return /*#__PURE__*/_jsxDEV(Species, {\n            name: data.name,\n            language: data.language,\n            averageLifespan: data.average_lifespan\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this);\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(InfiniteSpecies, \"3qsVl3wL2ymO6shXHvr1xn5JMmk=\", false, function () {\n  return [useInfiniteQuery];\n});\n\n_c = InfiniteSpecies;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfiniteSpecies\");","map":{"version":3,"sources":["/Users/kanghyew0n/Desktop/prac/React-Query-Prac/udemy/base-infinite-swapi/src/species/InfiniteSpecies.jsx"],"names":["InfiniteScroll","useInfiniteQuery","Species","initialUrl","fetchUrl","url","response","fetch","json","InfiniteSpecies","data","fetchNextPage","hasNextPage","isLoading","isError","error","isFetching","pageParam","getNextPageParam","lastPage","next","undefined","toString","pages","map","pageData","results","name","language","average_lifespan"],"mappings":";;;AAAA,OAAOA,cAAP,MAA2B,yBAA3B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,OAAT,QAAwB,WAAxB;;;AAEA,MAAMC,UAAU,GAAG,gCAAnB;;AACA,MAAMC,QAAQ,GAAG,MAAOC,GAAP,IAAe;AAC9B,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,SAAOC,QAAQ,CAACE,IAAT,EAAP;AACD,CAHD;;AAKA,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAChC,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,OALI;AAMJC,IAAAA,KANI;AAOJC,IAAAA;AAPI,MAQFf,gBAAgB,CAClB,YADkB,EAElB,CAAC;AAAEgB,IAAAA,SAAS,GAAGd;AAAd,GAAD,KAAgCC,QAAQ,CAACa,SAAD,CAFtB,EAGlB;AACEC,IAAAA,gBAAgB,EAAGC,QAAD,IAAcA,QAAQ,CAACC,IAAT,IAAiBC;AADnD,GAHkB,CARpB;AAgBA,MAAIR,SAAJ,EAAe,oBAAO;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACf,MAAIC,OAAJ,EAAa,oBAAO;AAAA,0BAAaC,KAAK,CAACO,QAAN,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEb,sBACE;AAAA,eACGN,UAAU,iBAAI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADjB,eAEE,QAAC,cAAD;AAAgB,MAAA,QAAQ,EAAEL,aAA1B;AAAyC,MAAA,OAAO,EAAEC,WAAlD;AAAA,gBACGF,IAAI,CAACa,KAAL,CAAWC,GAAX,CAAgBC,QAAD,IAAc;AAC5B,eAAOA,QAAQ,CAACC,OAAT,CAAiBF,GAAjB,CAAsBd,IAAD,IAAU;AACpC,8BACE,QAAC,OAAD;AACE,YAAA,IAAI,EAAEA,IAAI,CAACiB,IADb;AAEE,YAAA,QAAQ,EAAEjB,IAAI,CAACkB,QAFjB;AAGE,YAAA,eAAe,EAAElB,IAAI,CAACmB;AAHxB;AAAA;AAAA;AAAA;AAAA,kBADF;AAOD,SARM,CAAP;AASD,OAVA;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAkBD;;GAtCepB,e;UASVR,gB;;;KATUQ,e","sourcesContent":["import InfiniteScroll from \"react-infinite-scroller\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { Species } from \"./Species\";\n\nconst initialUrl = \"https://swapi.dev/api/species/\";\nconst fetchUrl = async (url) => {\n  const response = await fetch(url);\n  return response.json();\n};\n\nexport function InfiniteSpecies() {\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isLoading,\n    isError,\n    error,\n    isFetching,\n  } = useInfiniteQuery(\n    \"sw-species\",\n    ({ pageParam = initialUrl }) => fetchUrl(pageParam),\n    {\n      getNextPageParam: (lastPage) => lastPage.next || undefined,\n    }\n  );\n\n  if (isLoading) return <div className=\"loading\">Loading...</div>;\n  if (isError) return <div>Error! {error.toString()}</div>;\n\n  return (\n    <>\n      {isFetching && <div className=\"loading\">Loading...</div>}\n      <InfiniteScroll loadMore={fetchNextPage} hasMore={hasNextPage}>\n        {data.pages.map((pageData) => {\n          return pageData.results.map((data) => {\n            return (\n              <Species\n                name={data.name}\n                language={data.language}\n                averageLifespan={data.average_lifespan}\n              />\n            );\n          });\n        })}\n      </InfiniteScroll>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}