{"ast":null,"code":"var _jsxFileName = \"/Users/kanghyew0n/Desktop/prac/React-Query-Prac/udemy/base-infinite-swapi/src/people/InfinitePeople.jsx\",\n    _s = $RefreshSig$();\n\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { Person } from \"./Person\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialUrl = \"https://swapi.dev/api/people/\";\n\nconst fetchUrl = async url => {\n  const response = await fetch(url);\n  return response.json();\n};\n\nexport function InfinitePeople() {\n  _s();\n\n  // data : 페이지 정보를 담고 있음\n  // fetchNextPage : 데이터가 더 필요할 때 어느 함수를 실행할지 지시하는 역할\n  // hasNextPage : 수집할 데이터가 더 있는지 결정하는 불리언 타입\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isLoading,\n    isError,\n    error\n  } = useInfiniteQuery(\"sw-people\", ({\n    pageParam = initialUrl\n  }) => fetchUrl(pageParam), {\n    getNextPageParam: lastPage => lastPage.next || undefined\n  });\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 25\n  }, this);\n  if (isError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error! \", error.toString()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    loadMore: fetchNextPage,\n    hasMore: hasNextPage,\n    children: data.pages.map(pageData => {\n      return pageData.result.map(person => {\n        return /*#__PURE__*/_jsxDEV(Person, {\n          name: person.name,\n          hairColor: person.hair_color,\n          eyeColor: person.eye_color\n        }, person.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this);\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InfinitePeople, \"eKD8pksGG9x+cA9/jpULQ0TdyqM=\", false, function () {\n  return [useInfiniteQuery];\n});\n\n_c = InfinitePeople;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfinitePeople\");","map":{"version":3,"sources":["/Users/kanghyew0n/Desktop/prac/React-Query-Prac/udemy/base-infinite-swapi/src/people/InfinitePeople.jsx"],"names":["InfiniteScroll","useInfiniteQuery","Person","initialUrl","fetchUrl","url","response","fetch","json","InfinitePeople","data","fetchNextPage","hasNextPage","isLoading","isError","error","pageParam","getNextPageParam","lastPage","next","undefined","toString","pages","map","pageData","result","person","name","hair_color","eye_color"],"mappings":";;;AAAA,OAAOA,cAAP,MAA2B,yBAA3B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,MAAT,QAAuB,UAAvB;;AAEA,MAAMC,UAAU,GAAG,+BAAnB;;AACA,MAAMC,QAAQ,GAAG,MAAOC,GAAP,IAAe;AAC9B,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,SAAOC,QAAQ,CAACE,IAAT,EAAP;AACD,CAHD;;AAKA,OAAO,SAASC,cAAT,GAA0B;AAAA;;AAC/B;AACA;AACA;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,aAAR;AAAuBC,IAAAA,WAAvB;AAAoCC,IAAAA,SAApC;AAA+CC,IAAAA,OAA/C;AAAwDC,IAAAA;AAAxD,MACJd,gBAAgB,CACd,WADc,EAEd,CAAC;AAAEe,IAAAA,SAAS,GAAGb;AAAd,GAAD,KAAgCC,QAAQ,CAACY,SAAD,CAF1B,EAGd;AACEC,IAAAA,gBAAgB,EAAGC,QAAD,IAAcA,QAAQ,CAACC,IAAT,IAAiBC;AADnD,GAHc,CADlB;AASA,MAAIP,SAAJ,EAAe,oBAAO;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACf,MAAIC,OAAJ,EAAa,oBAAO;AAAA,0BAAaC,KAAK,CAACM,QAAN,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEb,sBACE,QAAC,cAAD;AAAgB,IAAA,QAAQ,EAAEV,aAA1B;AAAyC,IAAA,OAAO,EAAEC,WAAlD;AAAA,cACGF,IAAI,CAACY,KAAL,CAAWC,GAAX,CAAgBC,QAAD,IAAc;AAC5B,aAAOA,QAAQ,CAACC,MAAT,CAAgBF,GAAhB,CAAqBG,MAAD,IAAY;AACrC,4BACE,QAAC,MAAD;AAEE,UAAA,IAAI,EAAEA,MAAM,CAACC,IAFf;AAGE,UAAA,SAAS,EAAED,MAAM,CAACE,UAHpB;AAIE,UAAA,QAAQ,EAAEF,MAAM,CAACG;AAJnB,WACOH,MAAM,CAACC,IADd;AAAA;AAAA;AAAA;AAAA,gBADF;AAQD,OATM,CAAP;AAUD,KAXA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAhCelB,c;UAKZR,gB;;;KALYQ,c","sourcesContent":["import InfiniteScroll from \"react-infinite-scroller\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { Person } from \"./Person\";\n\nconst initialUrl = \"https://swapi.dev/api/people/\";\nconst fetchUrl = async (url) => {\n  const response = await fetch(url);\n  return response.json();\n};\n\nexport function InfinitePeople() {\n  // data : 페이지 정보를 담고 있음\n  // fetchNextPage : 데이터가 더 필요할 때 어느 함수를 실행할지 지시하는 역할\n  // hasNextPage : 수집할 데이터가 더 있는지 결정하는 불리언 타입\n  const { data, fetchNextPage, hasNextPage, isLoading, isError, error } =\n    useInfiniteQuery(\n      \"sw-people\",\n      ({ pageParam = initialUrl }) => fetchUrl(pageParam),\n      {\n        getNextPageParam: (lastPage) => lastPage.next || undefined,\n      }\n    );\n\n  if (isLoading) return <div className=\"loading\">Loading...</div>;\n  if (isError) return <div>Error! {error.toString()}</div>;\n\n  return (\n    <InfiniteScroll loadMore={fetchNextPage} hasMore={hasNextPage}>\n      {data.pages.map((pageData) => {\n        return pageData.result.map((person) => {\n          return (\n            <Person\n              key={person.name}\n              name={person.name}\n              hairColor={person.hair_color}\n              eyeColor={person.eye_color}\n            />\n          );\n        });\n      })}\n    </InfiniteScroll>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}