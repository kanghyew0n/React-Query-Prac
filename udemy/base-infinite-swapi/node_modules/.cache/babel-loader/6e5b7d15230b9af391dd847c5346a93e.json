{"ast":null,"code":"var _jsxFileName = \"/Users/kanghyew0n/Desktop/prac/React-Query-Prac/udemy/base-infinite-swapi/src/species/InfiniteSpecies.jsx\",\n    _s = $RefreshSig$();\n\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { Species } from \"./Species\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialUrl = \"https://swapi.dev/api/species/\";\n\nconst fetchUrl = async url => {\n  const response = await fetch(url);\n  return response.json();\n};\n\nexport function InfiniteSpecies() {\n  _s();\n\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isLoading,\n    isError,\n    error,\n    isFetching\n  } = useInfiniteQuery(\"sw-species\", ({\n    pageParam = initialUrl\n  }) => fetchUrl(pageParam), {\n    getNextPageParam: lastPage => lastPage.next || undefined\n  });\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 25\n  }, this);\n  if (isError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error! \", error.toString()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isFetching && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(InfiniteSpecies, \"ujawo4+fbkK2j39Rf/x57F8ViRw=\", false, function () {\n  return [useInfiniteQuery];\n});\n\n_c = InfiniteSpecies;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfiniteSpecies\");","map":{"version":3,"sources":["/Users/kanghyew0n/Desktop/prac/React-Query-Prac/udemy/base-infinite-swapi/src/species/InfiniteSpecies.jsx"],"names":["InfiniteScroll","useInfiniteQuery","Species","initialUrl","fetchUrl","url","response","fetch","json","InfiniteSpecies","data","fetchNextPage","hasNextPage","isLoading","isError","error","isFetching","pageParam","getNextPageParam","lastPage","next","undefined","toString"],"mappings":";;;AAAA,OAAOA,cAAP,MAA2B,yBAA3B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,OAAT,QAAwB,WAAxB;;;AAEA,MAAMC,UAAU,GAAG,gCAAnB;;AACA,MAAMC,QAAQ,GAAG,MAAOC,GAAP,IAAe;AAC9B,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,SAAOC,QAAQ,CAACE,IAAT,EAAP;AACD,CAHD;;AAKA,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAChC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,aAAR;AAAuBC,IAAAA,WAAvB;AAAoCC,IAAAA,SAApC;AAA+CC,IAAAA,OAA/C;AAAwDC,IAAAA,KAAxD;AAA+DC,IAAAA;AAA/D,MACJf,gBAAgB,CACd,YADc,EAEd,CAAC;AAAEgB,IAAAA,SAAS,GAAGd;AAAd,GAAD,KAAgCC,QAAQ,CAACa,SAAD,CAF1B,EAGd;AACEC,IAAAA,gBAAgB,EAAGC,QAAD,IAAcA,QAAQ,CAACC,IAAT,IAAiBC;AADnD,GAHc,CADlB;AASA,MAAIR,SAAJ,EAAe,oBAAO;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACf,MAAIC,OAAJ,EAAa,oBAAO;AAAA,0BAAaC,KAAK,CAACO,QAAN,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEb,sBACE;AAAA,eACCN,UAAU,iBAAI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADf,eAEE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;;GAnBeP,e;UAEZR,gB;;;KAFYQ,e","sourcesContent":["import InfiniteScroll from \"react-infinite-scroller\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { Species } from \"./Species\";\n\nconst initialUrl = \"https://swapi.dev/api/species/\";\nconst fetchUrl = async (url) => {\n  const response = await fetch(url);\n  return response.json();\n};\n\nexport function InfiniteSpecies() {\n  const { data, fetchNextPage, hasNextPage, isLoading, isError, error, isFetching } =\n    useInfiniteQuery(\n      \"sw-species\",\n      ({ pageParam = initialUrl }) => fetchUrl(pageParam),\n      {\n        getNextPageParam: (lastPage) => lastPage.next || undefined,\n      }\n    );\n\n  if (isLoading) return <div className=\"loading\">Loading...</div>;\n  if (isError) return <div>Error! {error.toString()}</div>;\n\n  return (\n    <>\n    {isFetching && <div className=\"loading\">Loading...</div>}\n      <InfiniteScroll />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}