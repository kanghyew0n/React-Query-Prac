{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\n\n// for when we need a query function for useQuery\nasync function getStaff() {\n  const {\n    data\n  } = await axiosInstance.get('/staff');\n  return data;\n}\n\nexport function useStaff() {\n  _s();\n\n  // for filtering staff by treatment\n  const [filter, setFilter] = useState('all'); // TODO: get data from server via useQuery\n\n  const fallback = [];\n  const {\n    staff = fallback\n  } = useQuery(queryKeys.staff, getStaff);\n  return {\n    staff,\n    filter,\n    setFilter\n  };\n}\n\n_s(useStaff, \"vlGTJcZcvktgcnz94uT8J4K3vYE=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/kanghyew0n/Desktop/prac/React-Query-Prac/udemy/base-lazy-days/client/src/components/staff/hooks/useStaff.ts"],"names":["useQuery","useState","axiosInstance","queryKeys","getStaff","data","get","useStaff","filter","setFilter","fallback","staff"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SAAmCC,QAAnC,QAAmD,OAAnD;AAGA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,QAA0B,gCAA1B;;AAGA;AACA,eAAeC,QAAf,GAA4C;AAC1C,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMH,aAAa,CAACI,GAAd,CAAkB,QAAlB,CAAvB;AACA,SAAOD,IAAP;AACD;;AAQD,OAAO,SAASE,QAAT,GAA8B;AAAA;;AACnC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,KAAD,CAApC,CAFmC,CAInC;;AACA,QAAMS,QAAQ,GAAG,EAAjB;AAEA,QAAM;AAAEC,IAAAA,KAAK,GAAGD;AAAV,MAAuBV,QAAQ,CAACG,SAAS,CAACQ,KAAX,EAAkBP,QAAlB,CAArC;AAEA,SAAO;AAAEO,IAAAA,KAAF;AAASH,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,GAAP;AACD;;GAVeF,Q;UAOeP,Q","sourcesContent":["import { useQuery } from '@chakra-ui/react';\nimport { Dispatch, SetStateAction, useState } from 'react';\n\nimport type { Staff } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { filterByTreatment } from '../utils';\n\n// for when we need a query function for useQuery\nasync function getStaff(): Promise<Staff[]> {\n  const { data } = await axiosInstance.get('/staff');\n  return data;\n}\n\ninterface UseStaff {\n  staff: Staff[];\n  filter: string;\n  setFilter: Dispatch<SetStateAction<string>>;\n}\n\nexport function useStaff(): UseStaff {\n  // for filtering staff by treatment\n  const [filter, setFilter] = useState('all');\n\n  // TODO: get data from server via useQuery\n  const fallback = [];\n\n  const { staff = fallback } = useQuery(queryKeys.staff, getStaff);\n\n  return { staff, filter, setFilter };\n}\n"]},"metadata":{},"sourceType":"module"}