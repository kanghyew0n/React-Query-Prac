{"ast":null,"code":"import { createStandaloneToast } from '@chakra-ui/react';\nimport { QueryClient } from 'react-query';\nimport { theme } from '../theme';\nconst toast = createStandaloneToast({\n  theme\n});\n\nfunction queryErrorHandler(error) {\n  // error is type unknown because in js, anything can be an error (e.g. throw(5))\n  const title = error instanceof Error ? error.message : 'error connecting to server'; // prevent duplicate toasts\n\n  toast.closeAll();\n  toast({\n    title,\n    status: 'error',\n    variant: 'subtle',\n    isClosable: true\n  });\n} // to satisfy typescript until this file has uncommented contents\n\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      onError: queryErrorHandler\n    }\n  }\n});","map":{"version":3,"sources":["/Users/kanghyew0n/Desktop/prac/React-Query-Prac/udemy/base-lazy-days/client/src/react-query/queryClient.ts"],"names":["createStandaloneToast","QueryClient","theme","toast","queryErrorHandler","error","title","Error","message","closeAll","status","variant","isClosable","queryClient","defaultOptions","queries","onError"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,kBAAtC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,KAAT,QAAsB,UAAtB;AAEA,MAAMC,KAAK,GAAGH,qBAAqB,CAAC;AAAEE,EAAAA;AAAF,CAAD,CAAnC;;AAEA,SAASE,iBAAT,CAA2BC,KAA3B,EAAiD;AAC/C;AACA,QAAMC,KAAK,GACTD,KAAK,YAAYE,KAAjB,GAAyBF,KAAK,CAACG,OAA/B,GAAyC,4BAD3C,CAF+C,CAK/C;;AACAL,EAAAA,KAAK,CAACM,QAAN;AACAN,EAAAA,KAAK,CAAC;AAAEG,IAAAA,KAAF;AAASI,IAAAA,MAAM,EAAE,OAAjB;AAA0BC,IAAAA,OAAO,EAAE,QAAnC;AAA6CC,IAAAA,UAAU,EAAE;AAAzD,GAAD,CAAL;AACD,C,CAED;;;AACA,OAAO,MAAMC,WAAW,GAAG,IAAIZ,WAAJ,CAAgB;AACzCa,EAAAA,cAAc,EAAE;AACdC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAEZ;AADF;AADK;AADyB,CAAhB,CAApB","sourcesContent":["import { createStandaloneToast } from '@chakra-ui/react';\nimport { QueryClient } from 'react-query';\n\nimport { theme } from '../theme';\n\nconst toast = createStandaloneToast({ theme });\n\nfunction queryErrorHandler(error: unknown): void {\n  // error is type unknown because in js, anything can be an error (e.g. throw(5))\n  const title =\n    error instanceof Error ? error.message : 'error connecting to server';\n\n  // prevent duplicate toasts\n  toast.closeAll();\n  toast({ title, status: 'error', variant: 'subtle', isClosable: true });\n}\n\n// to satisfy typescript until this file has uncommented contents\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      onError: queryErrorHandler,\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}